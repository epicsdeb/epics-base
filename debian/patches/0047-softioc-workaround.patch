Index: epics-base/modules/database/src/ioc/dbStatic/dbLexRoutines.c
===================================================================
--- epics-base.orig/modules/database/src/ioc/dbStatic/dbLexRoutines.c
+++ epics-base/modules/database/src/ioc/dbStatic/dbLexRoutines.c
@@ -159,12 +159,13 @@ static void *getLastTemp(void)
     return(ptempListNode->item);
 }
 
-const char *dbOpenFile(DBBASE *pdbbase,const char *filename,FILE **fp)
+const char *dbOpenFile(DBBASE **ppdbbase,const char *filename,FILE **fp)
 {
-    ELLLIST     *ppathList = (ELLLIST *)pdbbase->pathPvt;
+    ELLLIST     *ppathList;
     dbPathNode  *pdbPathNode;
     char        *fullfilename;
-
+    if (*ppdbbase == 0) *ppdbbase = dbAllocBase();
+    ppathList = (ELLLIST *)(*ppdbbase)->pathPvt;
     *fp = 0;
     if (!filename) return 0;
     if (!ppathList || ellCount(ppathList) == 0 ||
@@ -271,7 +272,7 @@ static long dbReadCOM(DBBASE **ppdbbase,
         FILE *fp1 = 0;
 
         if (pinputFile->filename)
-            pinputFile->path = dbOpenFile(pdbbase, pinputFile->filename, &fp1);
+            pinputFile->path = dbOpenFile(&pdbbase, pinputFile->filename, &fp1);
         if (!pinputFile->filename || !fp1) {
             errPrintf(0, __FILE__, __LINE__,
                 "dbRead opening file %s\n",pinputFile->filename);
@@ -431,7 +432,7 @@ static void dbIncludeNew(char *filename)
 
     pinputFile = dbCalloc(1,sizeof(inputFile));
     pinputFile->filename = macEnvExpand(filename);
-    pinputFile->path = dbOpenFile(pdbbase, pinputFile->filename, &fp);
+    pinputFile->path = dbOpenFile(&pdbbase, pinputFile->filename, &fp);
     if (!fp) {
         epicsPrintf("Can't open include file \"%s\"\n", filename);
         yyerror(NULL);
Index: epics-base/modules/database/src/ioc/dbStatic/dbStaticPvt.h
===================================================================
--- epics-base.orig/modules/database/src/ioc/dbStatic/dbStaticPvt.h
+++ epics-base/modules/database/src/ioc/dbStatic/dbStaticPvt.h
@@ -44,7 +44,7 @@ void dbMsgPrint(DBENTRY *pdbentry, const
 void dbPutStringSuggest(DBENTRY *pdbentry, const char *pstring);
 
 DBCORE_API
-const char *dbOpenFile(DBBASE *pdbbase,const char *filename,FILE **fp);
+const char *dbOpenFile(DBBASE **ppdbbase,const char *filename,FILE **fp);
 
 struct jlink;
 
@@ -115,6 +115,9 @@ PVDENTRY *dbPvdAdd(DBBASE *pdbbase,dbRec
 void dbPvdDelete(DBBASE *pdbbase,dbRecordNode *precnode);
 void dbPvdFreeMem(DBBASE *pdbbase);
 
+DBCORE_API
+char** dbCompleteRecord(const char *word);
+
 #ifdef __cplusplus
 }
 #endif
Index: epics-base/modules/database/src/std/softIoc/softMain.cpp
===================================================================
--- epics-base.orig/modules/database/src/std/softIoc/softMain.cpp
+++ epics-base/modules/database/src/std/softIoc/softMain.cpp
@@ -29,6 +29,7 @@
 #include "iocsh.h"
 #include "osiFileName.h"
 #include "epicsInstallDir.h"
+#include "dbStaticPvt.h"
 
 extern "C" int softIoc_registerRecordDeviceDriver(struct dbBase *pdbbase);
 
@@ -38,6 +39,8 @@ extern "C" int softIoc_registerRecordDev
 #  error -DEPICS_BASE required
 #endif
 
+
+
 #define DBD_BASE "dbd" OSI_PATH_SEPARATOR "softIoc.dbd"
 #define EXIT_BASE "db" OSI_PATH_SEPARATOR "softIocExit.db"
 #define DBD_FILE_REL ".." OSI_PATH_SEPARATOR ".." OSI_PATH_SEPARATOR DBD_BASE
@@ -53,14 +56,15 @@ static void exitSubroutine(subRecord *pr
     epicsExitLater((precord->a == 0.0) ? EXIT_SUCCESS : EXIT_FAILURE);
 }
 
-void usage(const char *arg0, const std::string& base_dbd) {
+void usage(const char *arg0, const std::string& base_dbd, const std::string& prefix) {
     std::cout<<"Usage: "<<arg0<<
                " [-D softIoc.dbd] [-h] [-S] [-s] [-v] [-a ascf]\n"
                "[-m macro=value,macro2=value2] [-d file.db]\n"
                "[-x prefix] [st.cmd]\n"
                "\n"
-               "    -D <dbd>  If used, must come first. Specify the path to the softIoc.dbdfile."
+               "    -D <dbd>  If used, must come first. Specify the path to the softIoc.dbdfile.\n"
                "        The compile-time install location is saved in the binary as a default.\n"
+               "        If the compile-time default is not found, EPICS_BASE/dbd will also be tried.\n"
                "\n"
                "    -h  Print this mesage and exit.\n"
                "\n"
@@ -92,7 +96,10 @@ void usage(const char *arg0, const std::
                "interactive IOC shell.\n"
                "\n"
                "Compiled-in path to softIoc.dbd is:\n"
-               "\t"<<base_dbd.c_str()<<"\n";
+               "\t"<<prefix+DBD_FILE_REL<<std::endl;
+               if(base_dbd == prefix+DBD_FILE_REL){
+                   std::cout<<"If it can't be located here, EPICS_BASE/dbd/softIoc.dbd will also be tried."<<std::endl;
+               }
 }
 
 void errIf(int ret, const std::string& msg)
@@ -103,17 +110,27 @@ void errIf(int ret, const std::string& m
 
 bool lazy_dbd_loaded;
 
-void lazy_dbd(const std::string& dbd_file) {
+void lazy_dbd(const std::string& dbd_file, const std::string& prefix) {
     if(lazy_dbd_loaded) return;
     lazy_dbd_loaded = true;
-
-    if (verbose)
-        std::cout<<"dbLoadDatabase(\""<<dbd_file<<"\")\n";
-    errIf(dbLoadDatabase(dbd_file.c_str(), NULL, NULL),
-          std::string("Failed to load DBD file: ")+dbd_file);
-
+    std::string loaded_file;
+    FILE *fp = NULL;
+    std::string dbd_relative_to_epics_base(DBD_FILE);
+    loaded_file = dbd_file;
+    dbOpenFile(&pdbbase, dbd_file.c_str(), &fp);
+    if(verbose)
+        std::cout<<"dbOpenFile(&pdbbase"<<dbd_file<<",&fp)"<<std::endl;
+    if((!fp) && dbd_file==prefix+DBD_FILE_REL){
+        loaded_file=dbd_relative_to_epics_base;
+        if(verbose)
+            std::cout<<"dbOpenFile(&pdbbase"<<dbd_relative_to_epics_base<<",&fp)"<<std::endl;
+        dbOpenFile(&pdbbase,dbd_relative_to_epics_base.c_str(),&fp);
+    }
+    if(fp && dbReadDatabaseFP(&pdbbase, fp, NULL, NULL)){
+        std::cerr<<"Failed to read "<<loaded_file<<", but it was found and loaded."<<std::endl;
+    }
     if (verbose)
-        std::cout<<"softIoc_registerRecordDeviceDriver(pdbbase)\n";
+        std::cout<<"softIoc_registerRecordDeviceDriver(pdbbase)"<<std::endl;
     errIf(softIoc_registerRecordDeviceDriver(pdbbase),
           "Failed to initialize database");
     registryFunctionAdd("exit", (REGISTRYFUNCTION) exitSubroutine);
@@ -133,38 +150,36 @@ int main(int argc, char *argv[])
         bool ranScript = false;
 
         // attempt to compute relative paths
-        {
-            std::string prefix;
-            char *cprefix = epicsGetExecDir();
-            if(cprefix) {
-                try {
-                    prefix = cprefix;
-                    free(cprefix);
-                } catch(...) {
-                    free(cprefix);
-                    throw;
-                }
+        std::string prefix;
+        char *cprefix = epicsGetExecDir();
+        if(cprefix) {
+            try {
+                prefix = cprefix;
+                free(cprefix);
+            } catch(...) {
+                free(cprefix);
+                throw;
             }
-
-            dbd_file = prefix + DBD_FILE_REL;
-            exit_file = prefix + EXIT_FILE_REL;
         }
 
+        dbd_file = prefix + DBD_FILE_REL;
+        exit_file = prefix + EXIT_FILE_REL;
+
         int opt;
 
         while ((opt = getopt(argc, argv, "ha:D:d:m:Ssx:v")) != -1) {
             switch (opt) {
             case 'h':               /* Print usage */
-                usage(argv[0], dbd_file);
+                usage(argv[0], dbd_file, prefix);
                 epicsExit(0);
                 return 0;
             default:
-                usage(argv[0], dbd_file);
+                usage(argv[0], dbd_file, prefix);
                 std::cerr<<"Unknown argument: -"<<char(opt)<<"\n";
                 epicsExit(2);
                 return 2;
             case 'a':
-                lazy_dbd(dbd_file);
+                lazy_dbd(dbd_file, prefix);
                 if (!macros.empty()) {
                     if (verbose)
                         std::cout<<"asSetSubstitutions(\""<<macros<<"\")\n";
@@ -183,7 +198,7 @@ int main(int argc, char *argv[])
                 dbd_file = optarg;
                 break;
             case 'd':
-                lazy_dbd(dbd_file);
+                lazy_dbd(dbd_file, prefix);
                 if (verbose) {
                     std::cout<<"dbLoadRecords(\""<<optarg<<"\"";
                     if(!macros.empty())
@@ -206,17 +221,26 @@ int main(int argc, char *argv[])
                 verbose = true;
                 break;
             case 'x':
-                lazy_dbd(dbd_file);
+                lazy_dbd(dbd_file, prefix);
                 xmacro  = "IOC=";
                 xmacro += optarg;
-                errIf(dbLoadRecords(exit_file.c_str(), xmacro.c_str()),
-                      std::string("Failed to load: ")+exit_file);
+                FILE *fp;
+                if(verbose)
+                    std::cout<<"dbOpenFile(\""<<exit_file<<"\", \""<<xmacro<<"\")\n";
+                dbOpenFile(&pdbbase, exit_file.c_str(), &fp);
+                if(!fp){
+                    dbOpenFile(&pdbbase, EXIT_FILE, &fp);
+                    if(verbose)
+                        std::cout<<"dbOpenFile(\""<<EXIT_FILE<<"\", \""<<xmacro<<"\")\n";
+                }
+                errIf(fp && dbLoadRecords(exit_file.c_str(), xmacro.c_str()),
+                      std::string("Failed to read: ")+exit_file+", but it was found and loaded.\n");
                 loadedDb = true;
                 break;
             }
         }
 
-        lazy_dbd(dbd_file);
+        lazy_dbd(dbd_file, prefix);
 
         if(optind<argc)  {
             // run script
@@ -256,7 +280,7 @@ int main(int argc, char *argv[])
                 }
 
             } else {
-                usage(argv[0], dbd_file);
+                usage(argv[0], dbd_file, prefix);
                 std::cerr<<"Nothing to do!\n";
                 epicsExit(1);
                 return 1;
Index: epics-base/modules/database/test/ioc/db/dbStaticTest.c
===================================================================
--- epics-base.orig/modules/database/test/ioc/db/dbStaticTest.c
+++ epics-base/modules/database/test/ioc/db/dbStaticTest.c
@@ -304,7 +304,7 @@ MAIN(dbStaticTest)
     testdbReadDatabase("dbTestIoc.dbd", NULL, NULL);
     dbTestIoc_registerRecordDeviceDriver(pdbbase);
     dbPath(pdbbase,"." OSI_PATH_LIST_SEPARATOR "..");
-    if(!(ldir = dbOpenFile(pdbbase, "dbStaticTest.db", &fp))) {
+    if(!(ldir = dbOpenFile(&pdbbase, "dbStaticTest.db", &fp))) {
         testAbort("Unable to read dbStaticTest.db");
     }
     if(dbReadDatabaseFP(&pdbbase, fp, NULL, NULL)) {
Index: epics-base/modules/pva2pva/pdbApp/softMain.cpp
===================================================================
--- epics-base.orig/modules/pva2pva/pdbApp/softMain.cpp
+++ epics-base/modules/pva2pva/pdbApp/softMain.cpp
@@ -28,6 +28,7 @@
 #include "iocInit.h"
 #include "iocsh.h"
 #include "osiFileName.h"
+#include "dbStaticPvt.h"
 
 #include <pv/qsrv.h>
 
@@ -66,6 +67,8 @@ void usage(const char *arg0, const std::
                "\n"
                "    -D <dbd>  If used, must come first. Specify the path to the softIocPVA.dbdfile."
                "        The compile-time install location is saved in the binary as a default.\n"
+               "        If the compiled-in path cannot be found, the application will look relative\n"
+               "        to EPICS_BASE."
                "\n"
                "    -h  Print this mesage and exit.\n"
                "\n"
@@ -110,18 +113,29 @@ void errIf(int ret, const std::string& m
 
 bool lazy_dbd_loaded;
 
-void lazy_dbd(const std::string& dbd_file) {
+void lazy_dbd(const std::string& dbd_file, const std::string& prefix) {
     if(lazy_dbd_loaded) return;
     lazy_dbd_loaded = true;
-
-    if (verbose)
-        std::cout<<"dbLoadDatabase(\""<<dbd_file<<"\")\n";
-    errIf(dbLoadDatabase(dbd_file.c_str(), NULL, NULL),
-          std::string("Failed to load DBD file: ")+dbd_file);
-
+    std::string loaded_file;
+    FILE *fp = NULL;
+    std::string dbd_relative_to_epics_base(DBD_FILE);
+    loaded_file = dbd_file;
+    dbOpenFile(&pdbbase,dbd_file.c_str(),&fp);
+    if(verbose)
+        std::cout<<"dbOpenFile(&pdbbase"<<dbd_file<<",&fp)"<<std::endl;
+    if((!fp) && dbd_file==prefix+DBD_FILE_REL){
+        loaded_file=dbd_relative_to_epics_base;
+        if(verbose)
+            std::cout<<"dbOpenFile(&pdbbase,"<<dbd_relative_to_epics_base<<",&fp)"<<std::endl;
+        dbOpenFile(&pdbbase,dbd_relative_to_epics_base.c_str(),&fp);
+        errIf(!fp, "failed to find softIocPVA.dbd");
+    }
+    if(fp && dbReadDatabaseFP(&pdbbase, fp, NULL, NULL))
+        std::cerr<<"Failed to read "<<loaded_file<<", but it was found and loaded."<<std::endl;
     if (verbose)
         std::cout<<"softIocPVA_registerRecordDeviceDriver(pdbbase)\n";
-    softIocPVA_registerRecordDeviceDriver(pdbbase);
+    errIf(softIocPVA_registerRecordDeviceDriver(pdbbase),
+        "Failed to initialize database");
     registryFunctionAdd("exit", (REGISTRYFUNCTION) exitSubroutine);
 }
 
@@ -137,26 +151,21 @@ int main(int argc, char *argv[])
         bool interactive = true;
         bool loadedDb = false;
         bool ranScript = false;
-
-#ifdef USE_EXECDIR
         // attempt to compute relative paths
-        {
-            std::string prefix;
-            char *cprefix = epicsGetExecDir();
-            if(cprefix) {
-                try {
-                    prefix = cprefix;
-                    free(cprefix);
-                } catch(...) {
-                    free(cprefix);
-                    throw;
-                }
+        std::string prefix;
+        char *cprefix = epicsGetExecDir();
+        if(cprefix) {
+            try {
+                prefix = cprefix;
+                free(cprefix);
+            } catch(...) {
+                free(cprefix);
+                throw;
             }
-
-            dbd_file = prefix + DBD_FILE_REL;
-            exit_file = prefix + EXIT_FILE_REL;
         }
-#endif
+
+        dbd_file = prefix + DBD_FILE_REL;
+        exit_file = prefix + EXIT_FILE_REL;
 
         int opt;
 
@@ -172,7 +181,7 @@ int main(int argc, char *argv[])
                 epicsExit(2);
                 return 2;
             case 'a':
-                lazy_dbd(dbd_file);
+                lazy_dbd(dbd_file, prefix);
                 if (!macros.empty()) {
                     if (verbose)
                         std::cout<<"asSetSubstitutions(\""<<macros<<"\")\n";
@@ -191,7 +200,7 @@ int main(int argc, char *argv[])
                 dbd_file = optarg;
                 break;
             case 'd':
-                lazy_dbd(dbd_file);
+                lazy_dbd(dbd_file,prefix);
                 if (verbose) {
                     std::cout<<"dbLoadRecords(\""<<optarg<<"\"";
                     if(!macros.empty())
@@ -214,7 +223,7 @@ int main(int argc, char *argv[])
                 verbose = true;
                 break;
             case 'x':
-                lazy_dbd(dbd_file);
+                lazy_dbd(dbd_file,prefix);
                 xmacro  = "IOC=";
                 xmacro += optarg;
                 errIf(dbLoadRecords(exit_file.c_str(), xmacro.c_str()),
@@ -227,7 +236,7 @@ int main(int argc, char *argv[])
             }
         }
 
-        lazy_dbd(dbd_file);
+        lazy_dbd(dbd_file,prefix);
 
         if(optind<argc)  {
             // run script
@@ -261,8 +270,10 @@ int main(int argc, char *argv[])
 
         } else {
             if (loadedDb || ranScript) {
-                epicsThreadExitMain();
-
+                // non-interactive IOC. spin forever
+                while(true) {
+                    epicsThreadSleep(1000.0);
+                }
             } else {
                 usage(argv[0], dbd_file);
                 std::cerr<<"Nothing to do!\n";
