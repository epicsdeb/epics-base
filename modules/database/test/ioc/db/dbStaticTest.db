
record(x, "testrec") {
    alias("testalias")
    info("A", "B")
}

alias("testrec", "testalias2")
alias("testalias2", "testalias3")

# New number formats allowed in JSON5, show dbLex/dbYacc parsing
record(x, "t1") {
    field( C8, +12)
    field( U8, +123)
    field(I16, +1234)
    field(U16, +12345)
    field(I32, +123456)
    field(U32, +1234567)
    field(I64, +12345678)
    field(U64, +123456789)
    field( C8, 0x1)
    field( U8, 0x12)
    field(I16, 0x123)
    field(U16, 0x1234)
    field(I32, 0x12345)
    field(U32, 0x123456)
    field(I64, 0x1234567)
    field(U64, 0x12345678)
    field( C8, +0x1)
    field( U8, -0x12)
    field(I16, +0x123)
    field(U16, -0x1234)
    field(I32, +0x12345)
    field(U32, -0x123456)
    field(I64, +0x1234567)
    field(U64, -0x12345678)
    field( C8, 0x7f)
    field( U8, 0xff)
    field(I16, 0x7fff)
    field(I16, -0x8000)
    field(U16, 0xffff)
    field(I32, 0x7fffffff)
    field(I32, -0x80000000)
    field(U32, 0xffffffff)
    field(I64, 0x7fffffffffffffff)
    field(I64, -0x8000000000000000)
    field(U64, 0xffffffffffffffff)

    field(F32, .123)
    field(F64, .123)
    field(F32, 123.)
    field(F64, 123.)
    field(F32, +.123)
    field(F64, +.123)
    field(F32, +123.)
    field(F64, +123.)
    field(F32, -.123)
    field(F64, -.123)
    field(F32, -123.)
    field(F64, -123.)
    field(F32, .123e4)
    field(F64, .123e4)
    field(F32, 123.e4)
    field(F64, 123.e4)
    field(F32, 123.e+4)
    field(F64, 123.e+4)
    field(F32, 123.e-4)
    field(F64, 123.e-4)
    field(F32, +.123e4)
    field(F64, +.123e4)
    field(F32, +123.e4)
    field(F64, +123.e4)
    field(F32, -.123e4)
    field(F64, -.123e4)
    field(F32, -123.e4)
    field(F64, -123.e4)
    field(F32, Infinity)
    field(F64, Infinity)
    field(F32, +Infinity)
    field(F64, +Infinity)
    field(F32, -Infinity)
    field(F64, -Infinity)
    field(F32, Nan)
    field(F64, Nan)

    info(i1, {x:0, +x:1, -x:2, .x:3})
    info(i2, Bare-word_string)
}
